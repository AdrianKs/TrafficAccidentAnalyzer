<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org">
<head>
   <link href="../css/myCss.css" rel="stylesheet">
   <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css" />
   <script src="../js/app.js" type="text/javascript"></script>
   <script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"></script>
   <script src="//d3js.org/d3.v3.min.js"></script>
   <meta charset="UTF-8"></meta>
   <title>Traffic Accident Analyzer</title>
</head>
<body>
	<div class="myHeader">
	    <h1>Traffic Accident Analyzer</h1>
	    <p></p>
	</div>
	<div class="container" id="container">
		<div class="mapContainer">
			<div id="map"></div>
		</div>
		<div class="svgContainer" id="svgContainer">
		
		</div>
	</div>


	<script src="../js/test1.js"></script>
	<script src="../js/realworldpoints.js"></script>
	<script>
		var map = L.map('map').setView([43.70, -79.375], 12);
		
		var tiles = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
		    attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
		}).addTo(map);
		
		var ap = ${ap}
		console.log(${ap})
		
		ap = ap.map(function (p) {return [p[0], p[1]]; });
		
		//addressPoints = addressPoints.map(function (p) { return [p[0], p[1]]; });
		
		var heat = L.heatLayer(ap).addTo(map);
	</script>
	


<script>
// set the dimensions of the canvas
var margin = {top: 60, right: 20, bottom: 70, left: 40},
  	width = 800 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;



// set the ranges
var x = d3.scale.ordinal().rangeRoundBands([0, width], .05);

var y = d3.scale.linear().range([height, 0]);

// define the axis
var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")


var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .ticks(10);


// add the SVG element
var svg = d3.select("#svgContainer").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height",height + margin.top + margin.bottom)
  	.append("g")
    .attr("transform", 
          "translate(" + margin.left + "," + margin.top + ")");
 
svg.append("text")
        .attr("x", (width / 2))             
        .attr("y", 0 - (margin.top / 2))
        .attr("text-anchor", "middle")  
        .style("font-size", "24px") 
        .style("text-decoration", "")  
        .text("Number of accidents to brand of car");
        
// load the data
//var data = [{"Letter": "A","Freq": 20},{"Letter" : "B","Freq": 12}]
//var data = [{"_1":"Audi","_2":528},{"_1":"BMW","_2":556}]
//var data = [{"Letter":"Audi","Freq":528},{"Letter":"BMW","Freq":556}]
var data = ${numbAccidentsToBrand};


//d3.json(jsonObject, function(error, data) {

    data.forEach(function(d) {
        //d.Letter = d.Letter;
        //d.Freq = +d.Freq;
        d._1 = d._1;
        d._2 = +d._2;
    });
	
  // scale the range of the data
  x.domain(data.map(function(d) { return d._1; }));
  y.domain([0, d3.max(data, function(d) { return d._2; })]);

  // add axis
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
    .selectAll("text")
      .style("text-anchor", "end")
      .attr("dx", "-.8em")
      .attr("dy", "-.55em")
      .attr("transform", "rotate(-90)" );

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 5)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Count");


  // Add bar chart
  svg.selectAll("bar")
      .data(data)
    .enter().append("rect")
      .attr("class", "bar")
      .attr("x", function(d) { return x(d._1); })
      .attr("width", x.rangeBand())
      .attr("y", function(d) { return y(d._2); })
      .attr("height", function(d) { return height - y(d._2); });

//});


</script>

<script>
// set the dimensions of the canvas
var margin = {top: 60, right: 20, bottom: 100, left: 40},
    width = 800 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;


// set the ranges
var x = d3.scale.ordinal().rangeRoundBands([0, width], .05);

var y = d3.scale.linear().range([height, 0]);

// define the axis
var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")


var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .ticks(10);


// add the SVG element
var svg = d3.select("#svgContainer").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", 
          "translate(" + margin.left + "," + margin.top + ")");
          
svg.append("text")
        .attr("x", (width / 2))             
        .attr("y", 0 - (margin.top / 2))
        .attr("text-anchor", "middle")  
        .style("font-size", "24px") 
        .style("text-decoration", "")  
        .text("Number of accidents by type");

// load the data
//var data = [{"Letter": "A","Freq": 20},{"Letter" : "B","Freq": 12}]
//var data = [{"_1":"Audi","_2":528},{"_1":"BMW","_2":556}]
//var data = [{"Letter":"Audi","Freq":528},{"Letter":"BMW","Freq":556}]
var data = ${numbOfDiffAccidentType}


//d3.json(jsonObject, function(error, data) {

    data.forEach(function(d) {
        //d.Letter = d.Letter;
        //d.Freq = +d.Freq;
        d._1 = d._1;
        d._2 = +d._2;
    });
	
  // scale the range of the data
  x.domain(data.map(function(d) { return d._1; }));
  y.domain([0, d3.max(data, function(d) { return d._2; })]);

  // add axis
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
    .selectAll("text")
      .style("text-anchor", "end")
      .attr("dx", "-.8em")
      .attr("dy", "-.55em")
      .attr("transform", "rotate(-90)" );

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 5)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Count");


  // Add bar chart
  svg.selectAll("bar")
      .data(data)
    .enter().append("rect")
      .attr("class", "bar")
      .attr("x", function(d) { return x(d._1); })
      .attr("width", x.rangeBand())
      .attr("y", function(d) { return y(d._2); })
      .attr("height", function(d) { return height - y(d._2); });

//});

</script>

<script>
// set the dimensions of the canvas
var margin = {top: 60, right: 20, bottom: 70, left: 40},
    width = 800 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;


// set the ranges
var x = d3.scale.ordinal().rangeRoundBands([0, width], .05);

var y = d3.scale.linear().range([height, 0]);

// define the axis
var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")


var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .ticks(10);


// add the SVG element
var svg = d3.select("#svgContainer").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", 
          "translate(" + margin.left + "," + margin.top + ")");
          
svg.append("text")
        .attr("x", (width / 2))             
        .attr("y", 0 - (margin.top / 2))
        .attr("text-anchor", "middle")  
        .style("font-size", "24px") 
        .style("text-decoration", "")  
        .text("Number of accidents by construction-year of car");

// load the data
var data = ${numbAccidentsToYearOfCar}


//d3.json(jsonObject, function(error, data) {

    data.forEach(function(d) {
        d._1 = d._1;
        d._2 = +d._2;
    });
	
  // scale the range of the data
  x.domain(data.map(function(d) { return d._1; }));
  y.domain([0, d3.max(data, function(d) { return d._2; })]);

  // add axis
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
    .selectAll("text")
      .style("text-anchor", "end")
      .attr("dx", "-.8em")
      .attr("dy", "-.55em")
      .attr("transform", "rotate(-90)" );

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 5)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Count");


  // Add bar chart
  svg.selectAll("bar")
      .data(data)
    .enter().append("rect")
      .attr("class", "bar")
      .attr("x", function(d) { return x(d._1); })
      .attr("width", x.rangeBand())
      .attr("y", function(d) { return y(d._2); })
      .attr("height", function(d) { return height - y(d._2); });

//});

</script>

<script>
// set the dimensions of the canvas
var margin = {top: 60, right: 20, bottom: 70, left: 40},
    width = 800 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;


// set the ranges
var x = d3.scale.ordinal().rangeRoundBands([0, width], .05);

var y = d3.scale.linear().range([height, 0]);

// define the axis
var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")


var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .ticks(10);


// add the SVG element
var svg = d3.select("#svgContainer").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", 
          "translate(" + margin.left + "," + margin.top + ")");
          
svg.append("text")
        .attr("x", (width / 2))             
        .attr("y", 0 - (margin.top / 2))
        .attr("text-anchor", "middle")  
        .style("font-size", "24px") 
        .style("text-decoration", "")  
        .text("Number of accidents by passengers");

// load the data
var data = ${numbAccidentsToNumbPasseger}


//d3.json(jsonObject, function(error, data) {

    data.forEach(function(d) {
        d._1 = d._1;
        d._2 = +d._2;
    });
	
  // scale the range of the data
  x.domain(data.map(function(d) { return d._1; }));
  y.domain([0, d3.max(data, function(d) { return d._2; })]);

  // add axis
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
    .selectAll("text")
      .style("text-anchor", "end")
      .attr("dx", "-.8em")
      .attr("dy", "-.55em")
      .attr("transform", "rotate(-90)" );

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 5)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Count");


  // Add bar chart
  svg.selectAll("bar")
      .data(data)
    .enter().append("rect")
      .attr("class", "bar")
      .attr("x", function(d) { return x(d._1); })
      .attr("width", x.rangeBand())
      .attr("y", function(d) { return y(d._2); })
      .attr("height", function(d) { return height - y(d._2); });

//});

</script>

<script>
    var margin = {top: 60, right: 20, bottom: 70, left: 40},
        width = 900 - margin.left - margin.right,
        height = 650 - margin.top - margin.bottom;
        
    var dataset = ${numbAccidentToVelocityToAccidentType}
    
	//var newDataset = [];
	//var sortedData = [[]];
   		
	/**for (var i = 0; i < dataset.length; i++) {
	    newDataset[0] = dataset[i][1];
	    newDataset[1] = dataset[i][2];
	    newDataset[2] = dataset[i][6];
	    newDataset[3] = dataset[i][4];
	    newDataset[4] = dataset[i][0];
	    newDataset[5] = dataset[i][3];
	    newDataset[6] = dataset[i][5];
	  
	    dataset[i] = newDataset;
	}**/
	
	//console.log(sortedData[0]);
	//console.log(dataset[0]);
	
	dataset.forEach(function (d) {
        d.forEach(function (d){
            d.y = d._2;
            delete d._2;
        });
    });

    //Set up stack method
    var stack = d3.layout.stack();
    //Data, stacked
    stack(dataset);

    var color_hash = {
        0: ["0 - 30km/h", "#00aedb"],
        1: ["30 - 60km/h", "#f47835"],
        2: ["60 - 90km/h", "#00ff00"],
        3: ["90 - 120km/h", "#a200ff"],
        4: ["120 - 150km/h", "#d41243"],
        5: ["150 - 180km/h", "#0000ff"],
        6: ["180 - 210km/h", "#008000"],
        7: [">210km/h", "#ee1289"]
    };

    var scales = dataset[0];

    //Set up scales
    var xScale = d3.scale.ordinal()
        .rangeRoundBands([0, width], .4);

    xScale.domain(scales.map(function (d) {
        return d._1;
    }));

    var yScale = d3.scale.linear()
        .domain([0,
            d3.max(dataset, function (d) {
                return d3.max(d, function (d) {
                    return d.y0 + d.y;
                });
            })
        ])
        .range([height - margin.bottom - margin.top, 0]);

    var xAxis = d3.svg.axis()
        .scale(xScale)
        .orient("bottom");

    var yAxis = d3.svg.axis()
        .scale(yScale)
        .orient("left")
        .ticks(10);


    //Easy colors accessible via a 10-step ordinal scale
    //    var colors = d3.scale.category10();

    //Create SVG element
    var svg = d3.select("#svgContainer")
        .append("svg")
        .attr("width", width)
        .attr("height", height);
                

    // Add a group for each row of data
    var groups = svg.selectAll("g")
        .data(dataset)
        .enter()
        .append("g")
        .attr("class", "rgroups")
        .attr("transform", "translate(" + margin.left + "," + (height - margin.bottom) + ")")
        .style("fill", function (d, i) {
            return color_hash[dataset.indexOf(d)][1];
        });

    // Add a rect for each data value
    var rects = groups.selectAll("rect")
        .data(function (d) {
            return d;
        })
        .enter()
        .append("rect")
        .attr("width", 2)
        .style("fill-opacity", 1e-6);


    rects.transition()
        .duration(function (d, i) {
            return 500 * i;
        })
        .ease("linear")
        .attr("x", function (d) {
            return xScale(d._1);
        })
        .attr("y", function (d) {
            return -(-yScale(d.y0) - yScale(d.y) + (height - margin.top - margin.bottom) * 2);
        })
        .attr("height", function (d) {
            return -yScale(d.y) + (height - margin.top - margin.bottom);
        })
        .attr("width", xScale.rangeBand())
        .style("fill-opacity", 1);

    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(40," + (height - margin.bottom) + ")")
        .call(xAxis);


    svg.append("g")
        .attr("class", "y axis")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
        .call(yAxis);
        
        
                        svg.append("text")
        .attr("x", (width / 2))             
        .attr("y", 0 + (margin.top / 2))
        .attr("text-anchor", "middle")  
        .style("font-size", "24px") 
        .style("text-decoration", "")  
        .text("Number of accidents by type by velocity");

    // adding legend

    var legend = svg.append("g")
        .attr("class", "legend")
        .attr("x", width - margin.right - 105)
        .attr("y", 25)
        .attr("height", 100)
        .attr("width", 150);

    legend.selectAll("g").data(dataset)
        .enter()
        .append('g')
        .each(function (d, i) {
            var g = d3.select(this);
            g.append("rect")
                .attr("x", width - margin.right - 105)
                .attr("y", i * 25 + 10)
                .attr("width", 10)
                .attr("height", 10)
                .style("fill", color_hash[String(i)][1]);

            g.append("text")
                .attr("x", width - margin.right - 90)
                .attr("y", i * 25 + 20)
                .attr("height", 30)
                .attr("width", 120)
                .style("fill", color_hash[String(i)][1])
                .text(color_hash[String(i)][0]);
                
      
        });
</script>

</body>
</html>